#!/bin/bash

# $RAPACHE_WEBROOT is the location of all the files
# by default, $RAPACHE_WEBROOT is current directory, but can be changed
# by setting $RAPACHE_WEBROOT variable before running rapache
if [ -z $RAPACHE_WEBROOT ]; then
    echo "WARNING: RAPACHE_WEBROOT not set, using current working directory" >&2
    RAPACHE_WEBROOT="."
fi

################################################################################
# functions

# urls have lots of weird characters in them like "%20" instead of spaces
# this function converts the weird encoding into normal ascii encoding
# input is stdin, output is stdout
function urldecode() {
    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

################################################################################
# main loop

while read nextline; do

################################################################################
# read in header information and initialize variables

# read in the http request from stdin
    read cmd request protocol <<< "$nextline"

# print the request to stderr
    echo "$cmd $request $protocol" >&2

# We only support GET and POST requests
# If any other request is received, then abort
    if [ "$cmd" != "GET" ] && [ "$cmd" != "POST" ]; then
        exit 1;

# read GET request header
    elif [ "$cmd" = "GET" ]; then
        # GET arguments are stored in the URL after the ? operator
        # we store everything after the ? into the variable args for later parsing
        args=$(cut -d'?' -f2 <<< "$request?")

        # if no arguments are passed to server, set args to null.
        if [ "$file" = "$RAPACHE_WEBROOT$args" ];then
            args=""
        fi

        # read until end of header
        while read -r line; do
            [ "$line" == $'\r' ] && break;
        done

# read POST request header
    elif [ "$cmd" = "POST" ]; then

        # POST arguments are stored in the header itself
        # We manually parse the header to create a variable called $args containing the arguments in the same format as the GET request
        while read -r line; do
            # if read to the end of header, stop
            [ "$line" == $'\r' ] && break;

            # read Content length from header
            # FIXME: update so this is POSIX compatible
            if [[ "$line" =~ ^Content-Length ]]; then
                cont_len=$(echo -e "$line" |tr -d '\r' | cut -d: -f2)
            fi
        done

        # read POST request body and extract data
        [ "$cont_len" -ne 0 ] && read -n $cont_len args
    fi

# get the file name from the request
    file=$RAPACHE_WEBROOT$(cut -d'?' -f1 <<< "$request")

################################################################################
# respond to the request

# if the requested file is executable, we run it and display output
# this is a Common Gateway Interface (CGI) webpage
    if [ -f "$file" ] && [ -x "$file" ]; then

        # set environment variables
        for arg in $(tr '&' ' ' <<< "$args"); do
            arg=$(urldecode "$arg")
            export "$arg"
        done

        # store the output of executable to temp, then check its content type
        output=$(tempfile)
        "$file" > "$output"

        CONTENT_TYPE=$(file --mime-type "$output" | cut -d' ' -f2)
        info=$(cat $output)

        echo "HTTP/1.1 200 OK"
        echo "Content-type: $CONTENT_TYPE"
        echo "Content-length: ${#info}"
        echo ""
        echo "$info"

# the requested file is not a shell script, so just return the file exactly
    else

        #check if requested file is a directory
        if [ -d "$file" ]; then

            # display index.html if it exists
            if [ -f "./$file/index.html" ]; then
                info=$(cat "$file/index.html")
                echo "HTTP/1.1 200 OK"
                echo "Content-length: ${#info}"
                echo ""
                echo "$info"

            # no index.html, so just display all the contents in the directory
            else
                for entry in "$file"/*; do
                    echo "$entry"
                done
                # FIXME: this shouldn't print out full paths; it should print the
                # FIXME: each of these paths should actually be links
                # FIXME: we need to encapsulate all of this in a proper HTTP header
            fi

        #if requested file isn't a directory
        else
            info=$(cat "$file")

            # check if the file exists in order to use it
            if [ $? = 0 ]; then

                # check content-type by file extension
                if [ ${file##*.} = "css" ] && [ -f "$file" ]; then
                    CONTENT_TYPE="text/css"
                # TODO: add checks for other file extensions as needed here
                # FIXME: why are we checking file extensions and not calling the file command?

                # otherwise we check content-type via mime-type
                else
                    CONTENT_TYPE=$(file --mime-type "$file"|cut -d' ' -f2)
                fi
                echo "HTTP/1.1 200 OK"
                echo "Content-type: $CONTENT_TYPE"
                echo "Content-length: ${#info}"
                echo ""

                # it's important that you 'cat' the file, because if it is echo'd, the binary data can get mangled.
                cat $file

            # the file could not be accessed
            else

                # This implements the 404 error page and checks if 404.html exists in the RAPACHE_WEBROOT directory.
                if [ ! -e "$file" ]; then
                    info=$(cat "$RAPACHE_WEBROOT/404.html")

                    # If the provided 404 page exists, we will display that page.
                    if [ $? = 0 ]; then
                        echo "HTTP/1.1 404 Not Found"
                        echo "Content-length: ${#info}"
                        echo ""
                        echo "$info"

                    # Else, if the provided 404 page does not exist, we will display a standard error page.
                    else
                        info="
                            <html>
                              <head>
                                <title>404 Not Found</title>
                              </head>
                              <body>
                                <h1>Not Found</h1>
                                <p>The requested URL $file was not found on this server.</p>
                              </body>
                            </html>
                        "
                        echo "HTTP/1.1 404 Not Found"
                        echo "Content-length:${#info}"
                        echo ""
                        echo "$info"
                    fi

                # This section of code handles 403: Forbidden Errors.
                elif ! [ -r "$file" ]; then
                    echo "HTTP/1.1 403 Forbidden"
                    error403=$(cat "$RAPACHE_WEBROOT/403.html")

                    # If $RAPACHE_WEBROOT/403.html exists, display that file.
                    if [ $? = 0 ]; then
                        echo "Content-length: ${#error403}"
                        echo ""
                        echo "$error403"

                    # Otherwise, display a default 403 error page.
                    else
                        info="
                            <html>
                              <head>
                                <title>
                                  403 Error: Forbidden
                                </title>
                              </head>
                              <body>
                                403 Error: Forbidden. You don't have permission to access $file on this server.
                              </body>
                            </html>
                        "
                        echo "Content-length: ${#info}"
                        echo ""
                        echo $info
                    fi
                fi
            fi
        fi
    fi

# FIXME: there's a lot of code duplication checking content-length/mime-type everywhere; this should all be refactored into a function call

done
